#!/usr/bin/env python
# coding: utf-8

# In[352]:


import os
import glob
import numpy as np
import pandas as pd
import geopandas as gpd
import mapclassify as mc
from datetime import datetime
from datetime import timedelta


# In[353]:


modelFolderPath = "Vulnerability_Animation"


# In[354]:


vulNameList = glob.glob(os.path.join(modelFolderPath,"Vulnerability_index_*.shp"))
vulList = []

for i in range(0, len(vulNameList)):
    vulList.append(glob.glob(os.path.join(modelFolderPath,"Vulnerability_index_*.shp"))[i][44:52])

vulList = sorted(vulList, key=lambda x: datetime.strptime(x, "%m%d%Y"))
print(vulList)


# In[355]:


#Find the index of missing date
def findIndexOfMissingDate(nameList):
    IndexOfMissingDateList = []
    for i in range(0, len(nameList)-1):
        if (datetime.strptime(nameList[i+1], "%m%d%Y").date() != datetime.strptime(vulList[i], "%m%d%Y").date()+timedelta(days=1)):
            IndexOfMissingDateList.append(i)
    return IndexOfMissingDateList
def findRangeOfMissingDate(index,nameList):
    delta = datetime.strptime(nameList[index+1], "%m%d%Y").date()-datetime.strptime(vulList[index], "%m%d%Y").date()
    return delta.days-1

print(findIndexOfMissingDate(vulList))


# In[356]:


def selectFirstDate(nameList):
    dmin = datetime.strptime(nameList[0], "%m%d%Y").date()
    index = 0
    for i in range(0, len(nameList)):
        d = datetime.strptime(nameList[i], "%m%d%Y").date()
        if (d<=dmin):
            index = i
            dmin = d
    return index

def selectLastDate(nameList):
    dmax = datetime.strptime(nameList[0], "%m%d%Y").date()
    index = 0
    for i in range(0, len(nameList)):
        d = datetime.strptime(nameList[i], "%m%d%Y").date()
        if (d>=dmax):
            index = i
            dmax = d
    return index


# In[357]:


firstIndex = selectFirstDate(vulList)
lastIndex = selectLastDate(vulList)
vul_df = gpd.read_file(glob.glob(os.path.join(modelFolderPath,"Vulnerability_index_"+vulList[firstIndex]+"*.shp"))[0])
vul_df


# In[358]:


vul = vul_df[['index','values','pop_1','geometry']]
vul


# In[359]:


missingDates = findIndexOfMissingDate(vulList)
for i in range(1, len(vulList)):
    vul_next = gpd.read_file(glob.glob(os.path.join(modelFolderPath,"Vulnerability_index_"+vulList[i]+"*.shp"))[0])
    vul['values'] = pd.concat([vul['values'].astype(str), vul_next['values'].astype(str)], axis=1).apply(lambda x: ','.join(x), axis=1)
    print(vul['values'])
    if i in missingDates:
        missingRange = findRangeOfMissingDate(i,vulList)
        for j in range(0,missingRange):
            vul_next['values'] = 0
            vul['values'] = pd.concat([vul['values'].astype(str), vul_next['values'].astype(str)], axis=1).apply(lambda x: ','.join(x), axis=1)
vul


# In[360]:


len(vul.loc[0,'values'].split(","))


# In[361]:


firstDate = datetime.strptime(vulList[firstIndex], "%m%d%Y").date()
lastDate = datetime.strptime(vulList[lastIndex], "%m%d%Y").date()
vul_last = gpd.read_file(glob.glob(os.path.join(modelFolderPath,"Vulnerability_index_"+vulList[lastIndex]+"*.shp"))[0])
vul["today_vul"] = vul_last[["values"]]
vul.loc[vul["today_vul"]<0, "today_vul"] = 0
vul["dt_start"] = firstDate.strftime("%Y-%m-%d")
vul["dt_end"] = lastDate.strftime("%Y-%m-%d")
vul["dt_unit"] = "day"
vul = vul.rename(columns={"index": "NAME", "values": "cases_ts", "pop_1":"population"})
vul


# In[362]:


sorted(vul["today_vul"])


# In[363]:


geom_simp_series = vul["geometry"].simplify(0.001)
geom_simp_df = geom_simp_series.to_frame(name="geometry")
vul_simp = vul.assign(geometry=geom_simp_df['geometry'])


# In[364]:


vul_simp.to_file("vulnerability.geojson", driver="GeoJSON")

